{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Airtable from 'airtable';\nAirtable.configure({\n  endpointUrl: 'https://api.airtable.com',\n  apiKey: 'keyBj1QK7piMXmdoF'\n});\nvar base = Airtable.base('appuxyROrm9vUAbRD');\n\nfunction getResults() {\n  return _getResults.apply(this, arguments);\n}\n\nfunction _getResults() {\n  _getResults = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var results;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            results = [];\n            _context.next = 3;\n            return base('Matches').select({\n              // Selecting the first 3 records in Grid view:\n              maxRecords: 5,\n              view: 'Grid view'\n            }).firstPage(function (err, records) {\n              if (err) {\n                console.error(err);\n                return;\n              } // console.log(records);\n              // results.push(records);\n\n\n              results = records;\n            });\n\n          case 3:\n            debugger;\n            return _context.abrupt(\"return\", results);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getResults.apply(this, arguments);\n}\n\nexport { getResults };","map":{"version":3,"sources":["/Users/dean/github/keyforgeCafe/lib/db.js"],"names":["Airtable","configure","endpointUrl","apiKey","base","getResults","results","select","maxRecords","view","firstPage","err","records","console","error"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEAA,QAAQ,CAACC,SAAT,CAAmB;AACjBC,EAAAA,WAAW,EAAE,0BADI;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAAnB;AAKA,IAAMC,IAAI,GAAGJ,QAAQ,CAACI,IAAT,CAAc,mBAAd,CAAb;;SAEeC,U;;;;;;;2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,YAAAA,OADN,GACgB,EADhB;AAAA;AAAA,mBAGQF,IAAI,CAAC,SAAD,CAAJ,CACHG,MADG,CACI;AACN;AACAC,cAAAA,UAAU,EAAE,CAFN;AAGNC,cAAAA,IAAI,EAAE;AAHA,aADJ,EAMHC,SANG,CAMO,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC3B,kBAAID,GAAJ,EAAS;AACPE,gBAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACA;AACD,eAJ0B,CAK3B;AACA;;;AACAL,cAAAA,OAAO,GAAGM,OAAV;AACD,aAdG,CAHR;;AAAA;AAmBE;AAnBF,6CAoBSN,OApBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuBA,SAASD,UAAT","sourcesContent":["import Airtable from 'airtable';\n\nAirtable.configure({\n  endpointUrl: 'https://api.airtable.com',\n  apiKey: 'keyBj1QK7piMXmdoF'\n});\n\nconst base = Airtable.base('appuxyROrm9vUAbRD');\n\nasync function getResults() {\n  let results = [];\n\n  await base('Matches')\n    .select({\n      // Selecting the first 3 records in Grid view:\n      maxRecords: 5,\n      view: 'Grid view'\n    })\n    .firstPage((err, records) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n      // console.log(records);\n      // results.push(records);\n      results = records;\n    });\n\n  debugger;\n  return results;\n}\n\nexport { getResults };\n"]},"metadata":{},"sourceType":"module"}